Terminals unused in grammar

   ERROR
   LETTER
   EOL
   COMMENT
   BLANK


State 96 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: declaration-list

    2 declaration-list: declaration-list declaration
    3                 | declaration

    4 declaration: var-declaration
    5            | fun-declaration

    6 var-declaration: type-specifier IDENTIFIER SEMICOLON
    7                | type-specifier IDENTIFIER LBRACKET NUMBER RBRACKET SEMICOLON

    8 type-specifier: INT
    9               | VOID

   10 fun-declaration: type-specifier IDENTIFIER LPARENTHESE params RPARENTHESE compound-stmt

   11 params: param-list
   12       | VOID

   13 param-list: param-list COMMA param
   14           | param

   15 param: type-specifier IDENTIFIER
   16      | type-specifier IDENTIFIER ARRAY

   17 compound-stmt: LBRACE local-declarations statement-list RBRACE

   18 local-declarations: local-declarations var-declaration
   19                   | %empty

   20 statement-list: statement-list statement
   21               | %empty

   22 statement: expression-stmt
   23          | compound-stmt
   24          | selection-stmt
   25          | iteration-stmt
   26          | return-stmt

   27 expression-stmt: expression SEMICOLON
   28                | SEMICOLON

   29 selection-stmt: IF LPARENTHESE expression RPARENTHESE statement
   30               | IF LPARENTHESE expression RPARENTHESE statement ELSE statement

   31 iteration-stmt: WHILE LPARENTHESE expression RPARENTHESE statement

   32 return-stmt: RETURN SEMICOLON
   33            | RETURN expression SEMICOLON

   34 expression: var ASSIGN expression
   35           | simple-expression

   36 var: IDENTIFIER
   37    | IDENTIFIER LBRACKET expression RBRACKET

   38 simple-expression: additive-expression relop additive-expression
   39                  | additive-expression

   40 relop: LTE
   41      | LT
   42      | GT
   43      | GTE
   44      | EQ
   45      | NEQ

   46 additive-expression: additive-expression addop term
   47                    | term

   48 addop: ADD
   49      | SUB

   50 term: term mulop factor
   51     | factor

   52 mulop: MUL
   53      | DIV

   54 factor: LPARENTHESE expression RPARENTHESE
   55       | var
   56       | call
   57       | NUMBER

   58 call: IDENTIFIER LPARENTHESE args RPARENTHESE

   59 args: arg-list
   60     | %empty

   61 arg-list: arg-list COMMA expression
   62         | expression


Terminals, with rules where they appear

$end (0) 0
error (256)
ERROR (258)
ADD (259) 48
SUB (260) 49
MUL (261) 52
DIV (262) 53
LT (263) 41
LTE (264) 40
GT (265) 42
GTE (266) 43
EQ (267) 44
NEQ (268) 45
ASSIGN (269) 34
SEMICOLON (270) 6 7 27 28 32 33
COMMA (271) 13 61
LPARENTHESE (272) 10 29 30 31 54 58
RPARENTHESE (273) 10 29 30 31 54 58
LBRACKET (274) 7 37
RBRACKET (275) 7 37
LBRACE (276) 17
RBRACE (277) 17
ELSE (278) 30
IF (279) 29 30
INT (280) 8
RETURN (281) 32 33
VOID (282) 9 12
WHILE (283) 31
IDENTIFIER (284) 6 7 10 15 16 36 37 58
NUMBER (285) 7 57
ARRAY (286) 16
LETTER (287)
EOL (288)
COMMENT (289)
BLANK (290)


Nonterminals, with rules where they appear

$accept (36)
    on left: 0
program (37)
    on left: 1, on right: 0
declaration-list (38)
    on left: 2 3, on right: 1 2
declaration (39)
    on left: 4 5, on right: 2 3
var-declaration (40)
    on left: 6 7, on right: 4 18
type-specifier (41)
    on left: 8 9, on right: 6 7 10 15 16
fun-declaration (42)
    on left: 10, on right: 5
params (43)
    on left: 11 12, on right: 10
param-list (44)
    on left: 13 14, on right: 11 13
param (45)
    on left: 15 16, on right: 13 14
compound-stmt (46)
    on left: 17, on right: 10 23
local-declarations (47)
    on left: 18 19, on right: 17 18
statement-list (48)
    on left: 20 21, on right: 17 20
statement (49)
    on left: 22 23 24 25 26, on right: 20 29 30 31
expression-stmt (50)
    on left: 27 28, on right: 22
selection-stmt (51)
    on left: 29 30, on right: 24
iteration-stmt (52)
    on left: 31, on right: 25
return-stmt (53)
    on left: 32 33, on right: 26
expression (54)
    on left: 34 35, on right: 27 29 30 31 33 34 37 54 61 62
var (55)
    on left: 36 37, on right: 34 55
simple-expression (56)
    on left: 38 39, on right: 35
relop (57)
    on left: 40 41 42 43 44 45, on right: 38
additive-expression (58)
    on left: 46 47, on right: 38 39 46
addop (59)
    on left: 48 49, on right: 46
term (60)
    on left: 50 51, on right: 46 47 50
mulop (61)
    on left: 52 53, on right: 50
factor (62)
    on left: 54 55 56 57, on right: 50 51
call (63)
    on left: 58, on right: 56
args (64)
    on left: 59 60, on right: 58
arg-list (65)
    on left: 61 62, on right: 59 61


State 0

    0 $accept: . program $end

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    program           go to state 3
    declaration-list  go to state 4
    declaration       go to state 5
    var-declaration   go to state 6
    type-specifier    go to state 7
    fun-declaration   go to state 8


State 1

    8 type-specifier: INT .

    $default  reduce using rule 8 (type-specifier)


State 2

    9 type-specifier: VOID .

    $default  reduce using rule 9 (type-specifier)


State 3

    0 $accept: program . $end

    $end  shift, and go to state 9


State 4

    1 program: declaration-list .
    2 declaration-list: declaration-list . declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 1 (program)

    declaration      go to state 10
    var-declaration  go to state 6
    type-specifier   go to state 7
    fun-declaration  go to state 8


State 5

    3 declaration-list: declaration .

    $default  reduce using rule 3 (declaration-list)


State 6

    4 declaration: var-declaration .

    $default  reduce using rule 4 (declaration)


State 7

    6 var-declaration: type-specifier . IDENTIFIER SEMICOLON
    7                | type-specifier . IDENTIFIER LBRACKET NUMBER RBRACKET SEMICOLON
   10 fun-declaration: type-specifier . IDENTIFIER LPARENTHESE params RPARENTHESE compound-stmt

    IDENTIFIER  shift, and go to state 11


State 8

    5 declaration: fun-declaration .

    $default  reduce using rule 5 (declaration)


State 9

    0 $accept: program $end .

    $default  accept


State 10

    2 declaration-list: declaration-list declaration .

    $default  reduce using rule 2 (declaration-list)


State 11

    6 var-declaration: type-specifier IDENTIFIER . SEMICOLON
    7                | type-specifier IDENTIFIER . LBRACKET NUMBER RBRACKET SEMICOLON
   10 fun-declaration: type-specifier IDENTIFIER . LPARENTHESE params RPARENTHESE compound-stmt

    SEMICOLON    shift, and go to state 12
    LPARENTHESE  shift, and go to state 13
    LBRACKET     shift, and go to state 14


State 12

    6 var-declaration: type-specifier IDENTIFIER SEMICOLON .

    $default  reduce using rule 6 (var-declaration)


State 13

   10 fun-declaration: type-specifier IDENTIFIER LPARENTHESE . params RPARENTHESE compound-stmt

    INT   shift, and go to state 1
    VOID  shift, and go to state 15

    type-specifier  go to state 16
    params          go to state 17
    param-list      go to state 18
    param           go to state 19


State 14

    7 var-declaration: type-specifier IDENTIFIER LBRACKET . NUMBER RBRACKET SEMICOLON

    NUMBER  shift, and go to state 20


State 15

    9 type-specifier: VOID .
   12 params: VOID .

    RPARENTHESE  reduce using rule 12 (params)
    $default     reduce using rule 9 (type-specifier)


State 16

   15 param: type-specifier . IDENTIFIER
   16      | type-specifier . IDENTIFIER ARRAY

    IDENTIFIER  shift, and go to state 21


State 17

   10 fun-declaration: type-specifier IDENTIFIER LPARENTHESE params . RPARENTHESE compound-stmt

    RPARENTHESE  shift, and go to state 22


State 18

   11 params: param-list .
   13 param-list: param-list . COMMA param

    COMMA  shift, and go to state 23

    $default  reduce using rule 11 (params)


State 19

   14 param-list: param .

    $default  reduce using rule 14 (param-list)


State 20

    7 var-declaration: type-specifier IDENTIFIER LBRACKET NUMBER . RBRACKET SEMICOLON

    RBRACKET  shift, and go to state 24


State 21

   15 param: type-specifier IDENTIFIER .
   16      | type-specifier IDENTIFIER . ARRAY

    ARRAY  shift, and go to state 25

    $default  reduce using rule 15 (param)


State 22

   10 fun-declaration: type-specifier IDENTIFIER LPARENTHESE params RPARENTHESE . compound-stmt

    LBRACE  shift, and go to state 26

    compound-stmt  go to state 27


State 23

   13 param-list: param-list COMMA . param

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    type-specifier  go to state 16
    param           go to state 28


State 24

    7 var-declaration: type-specifier IDENTIFIER LBRACKET NUMBER RBRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 29


State 25

   16 param: type-specifier IDENTIFIER ARRAY .

    $default  reduce using rule 16 (param)


State 26

   17 compound-stmt: LBRACE . local-declarations statement-list RBRACE

    $default  reduce using rule 19 (local-declarations)

    local-declarations  go to state 30


State 27

   10 fun-declaration: type-specifier IDENTIFIER LPARENTHESE params RPARENTHESE compound-stmt .

    $default  reduce using rule 10 (fun-declaration)


State 28

   13 param-list: param-list COMMA param .

    $default  reduce using rule 13 (param-list)


State 29

    7 var-declaration: type-specifier IDENTIFIER LBRACKET NUMBER RBRACKET SEMICOLON .

    $default  reduce using rule 7 (var-declaration)


State 30

   17 compound-stmt: LBRACE local-declarations . statement-list RBRACE
   18 local-declarations: local-declarations . var-declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 21 (statement-list)

    var-declaration  go to state 31
    type-specifier   go to state 32
    statement-list   go to state 33


State 31

   18 local-declarations: local-declarations var-declaration .

    $default  reduce using rule 18 (local-declarations)


State 32

    6 var-declaration: type-specifier . IDENTIFIER SEMICOLON
    7                | type-specifier . IDENTIFIER LBRACKET NUMBER RBRACKET SEMICOLON

    IDENTIFIER  shift, and go to state 34


State 33

   17 compound-stmt: LBRACE local-declarations statement-list . RBRACE
   20 statement-list: statement-list . statement

    SEMICOLON    shift, and go to state 35
    LPARENTHESE  shift, and go to state 36
    LBRACE       shift, and go to state 26
    RBRACE       shift, and go to state 37
    IF           shift, and go to state 38
    RETURN       shift, and go to state 39
    WHILE        shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    NUMBER       shift, and go to state 42

    compound-stmt        go to state 43
    statement            go to state 44
    expression-stmt      go to state 45
    selection-stmt       go to state 46
    iteration-stmt       go to state 47
    return-stmt          go to state 48
    expression           go to state 49
    var                  go to state 50
    simple-expression    go to state 51
    additive-expression  go to state 52
    term                 go to state 53
    factor               go to state 54
    call                 go to state 55


State 34

    6 var-declaration: type-specifier IDENTIFIER . SEMICOLON
    7                | type-specifier IDENTIFIER . LBRACKET NUMBER RBRACKET SEMICOLON

    SEMICOLON  shift, and go to state 12
    LBRACKET   shift, and go to state 14


State 35

   28 expression-stmt: SEMICOLON .

    $default  reduce using rule 28 (expression-stmt)


State 36

   54 factor: LPARENTHESE . expression RPARENTHESE

    LPARENTHESE  shift, and go to state 36
    IDENTIFIER   shift, and go to state 41
    NUMBER       shift, and go to state 42

    expression           go to state 56
    var                  go to state 50
    simple-expression    go to state 51
    additive-expression  go to state 52
    term                 go to state 53
    factor               go to state 54
    call                 go to state 55


State 37

   17 compound-stmt: LBRACE local-declarations statement-list RBRACE .

    $default  reduce using rule 17 (compound-stmt)


State 38

   29 selection-stmt: IF . LPARENTHESE expression RPARENTHESE statement
   30               | IF . LPARENTHESE expression RPARENTHESE statement ELSE statement

    LPARENTHESE  shift, and go to state 57


State 39

   32 return-stmt: RETURN . SEMICOLON
   33            | RETURN . expression SEMICOLON

    SEMICOLON    shift, and go to state 58
    LPARENTHESE  shift, and go to state 36
    IDENTIFIER   shift, and go to state 41
    NUMBER       shift, and go to state 42

    expression           go to state 59
    var                  go to state 50
    simple-expression    go to state 51
    additive-expression  go to state 52
    term                 go to state 53
    factor               go to state 54
    call                 go to state 55


State 40

   31 iteration-stmt: WHILE . LPARENTHESE expression RPARENTHESE statement

    LPARENTHESE  shift, and go to state 60


State 41

   36 var: IDENTIFIER .
   37    | IDENTIFIER . LBRACKET expression RBRACKET
   58 call: IDENTIFIER . LPARENTHESE args RPARENTHESE

    LPARENTHESE  shift, and go to state 61
    LBRACKET     shift, and go to state 62

    $default  reduce using rule 36 (var)


State 42

   57 factor: NUMBER .

    $default  reduce using rule 57 (factor)


State 43

   23 statement: compound-stmt .

    $default  reduce using rule 23 (statement)


State 44

   20 statement-list: statement-list statement .

    $default  reduce using rule 20 (statement-list)


State 45

   22 statement: expression-stmt .

    $default  reduce using rule 22 (statement)


State 46

   24 statement: selection-stmt .

    $default  reduce using rule 24 (statement)


State 47

   25 statement: iteration-stmt .

    $default  reduce using rule 25 (statement)


State 48

   26 statement: return-stmt .

    $default  reduce using rule 26 (statement)


State 49

   27 expression-stmt: expression . SEMICOLON

    SEMICOLON  shift, and go to state 63


State 50

   34 expression: var . ASSIGN expression
   55 factor: var .

    ASSIGN  shift, and go to state 64

    $default  reduce using rule 55 (factor)


State 51

   35 expression: simple-expression .

    $default  reduce using rule 35 (expression)


State 52

   38 simple-expression: additive-expression . relop additive-expression
   39                  | additive-expression .
   46 additive-expression: additive-expression . addop term

    ADD  shift, and go to state 65
    SUB  shift, and go to state 66
    LT   shift, and go to state 67
    LTE  shift, and go to state 68
    GT   shift, and go to state 69
    GTE  shift, and go to state 70
    EQ   shift, and go to state 71
    NEQ  shift, and go to state 72

    $default  reduce using rule 39 (simple-expression)

    relop  go to state 73
    addop  go to state 74


State 53

   47 additive-expression: term .
   50 term: term . mulop factor

    MUL  shift, and go to state 75
    DIV  shift, and go to state 76

    $default  reduce using rule 47 (additive-expression)

    mulop  go to state 77


State 54

   51 term: factor .

    $default  reduce using rule 51 (term)


State 55

   56 factor: call .

    $default  reduce using rule 56 (factor)


State 56

   54 factor: LPARENTHESE expression . RPARENTHESE

    RPARENTHESE  shift, and go to state 78


State 57

   29 selection-stmt: IF LPARENTHESE . expression RPARENTHESE statement
   30               | IF LPARENTHESE . expression RPARENTHESE statement ELSE statement

    LPARENTHESE  shift, and go to state 36
    IDENTIFIER   shift, and go to state 41
    NUMBER       shift, and go to state 42

    expression           go to state 79
    var                  go to state 50
    simple-expression    go to state 51
    additive-expression  go to state 52
    term                 go to state 53
    factor               go to state 54
    call                 go to state 55


State 58

   32 return-stmt: RETURN SEMICOLON .

    $default  reduce using rule 32 (return-stmt)


State 59

   33 return-stmt: RETURN expression . SEMICOLON

    SEMICOLON  shift, and go to state 80


State 60

   31 iteration-stmt: WHILE LPARENTHESE . expression RPARENTHESE statement

    LPARENTHESE  shift, and go to state 36
    IDENTIFIER   shift, and go to state 41
    NUMBER       shift, and go to state 42

    expression           go to state 81
    var                  go to state 50
    simple-expression    go to state 51
    additive-expression  go to state 52
    term                 go to state 53
    factor               go to state 54
    call                 go to state 55


State 61

   58 call: IDENTIFIER LPARENTHESE . args RPARENTHESE

    LPARENTHESE  shift, and go to state 36
    IDENTIFIER   shift, and go to state 41
    NUMBER       shift, and go to state 42

    $default  reduce using rule 60 (args)

    expression           go to state 82
    var                  go to state 50
    simple-expression    go to state 51
    additive-expression  go to state 52
    term                 go to state 53
    factor               go to state 54
    call                 go to state 55
    args                 go to state 83
    arg-list             go to state 84


State 62

   37 var: IDENTIFIER LBRACKET . expression RBRACKET

    LPARENTHESE  shift, and go to state 36
    IDENTIFIER   shift, and go to state 41
    NUMBER       shift, and go to state 42

    expression           go to state 85
    var                  go to state 50
    simple-expression    go to state 51
    additive-expression  go to state 52
    term                 go to state 53
    factor               go to state 54
    call                 go to state 55


State 63

   27 expression-stmt: expression SEMICOLON .

    $default  reduce using rule 27 (expression-stmt)


State 64

   34 expression: var ASSIGN . expression

    LPARENTHESE  shift, and go to state 36
    IDENTIFIER   shift, and go to state 41
    NUMBER       shift, and go to state 42

    expression           go to state 86
    var                  go to state 50
    simple-expression    go to state 51
    additive-expression  go to state 52
    term                 go to state 53
    factor               go to state 54
    call                 go to state 55


State 65

   48 addop: ADD .

    $default  reduce using rule 48 (addop)


State 66

   49 addop: SUB .

    $default  reduce using rule 49 (addop)


State 67

   41 relop: LT .

    $default  reduce using rule 41 (relop)


State 68

   40 relop: LTE .

    $default  reduce using rule 40 (relop)


State 69

   42 relop: GT .

    $default  reduce using rule 42 (relop)


State 70

   43 relop: GTE .

    $default  reduce using rule 43 (relop)


State 71

   44 relop: EQ .

    $default  reduce using rule 44 (relop)


State 72

   45 relop: NEQ .

    $default  reduce using rule 45 (relop)


State 73

   38 simple-expression: additive-expression relop . additive-expression

    LPARENTHESE  shift, and go to state 36
    IDENTIFIER   shift, and go to state 41
    NUMBER       shift, and go to state 42

    var                  go to state 87
    additive-expression  go to state 88
    term                 go to state 53
    factor               go to state 54
    call                 go to state 55


State 74

   46 additive-expression: additive-expression addop . term

    LPARENTHESE  shift, and go to state 36
    IDENTIFIER   shift, and go to state 41
    NUMBER       shift, and go to state 42

    var     go to state 87
    term    go to state 89
    factor  go to state 54
    call    go to state 55


State 75

   52 mulop: MUL .

    $default  reduce using rule 52 (mulop)


State 76

   53 mulop: DIV .

    $default  reduce using rule 53 (mulop)


State 77

   50 term: term mulop . factor

    LPARENTHESE  shift, and go to state 36
    IDENTIFIER   shift, and go to state 41
    NUMBER       shift, and go to state 42

    var     go to state 87
    factor  go to state 90
    call    go to state 55


State 78

   54 factor: LPARENTHESE expression RPARENTHESE .

    $default  reduce using rule 54 (factor)


State 79

   29 selection-stmt: IF LPARENTHESE expression . RPARENTHESE statement
   30               | IF LPARENTHESE expression . RPARENTHESE statement ELSE statement

    RPARENTHESE  shift, and go to state 91


State 80

   33 return-stmt: RETURN expression SEMICOLON .

    $default  reduce using rule 33 (return-stmt)


State 81

   31 iteration-stmt: WHILE LPARENTHESE expression . RPARENTHESE statement

    RPARENTHESE  shift, and go to state 92


State 82

   62 arg-list: expression .

    $default  reduce using rule 62 (arg-list)


State 83

   58 call: IDENTIFIER LPARENTHESE args . RPARENTHESE

    RPARENTHESE  shift, and go to state 93


State 84

   59 args: arg-list .
   61 arg-list: arg-list . COMMA expression

    COMMA  shift, and go to state 94

    $default  reduce using rule 59 (args)


State 85

   37 var: IDENTIFIER LBRACKET expression . RBRACKET

    RBRACKET  shift, and go to state 95


State 86

   34 expression: var ASSIGN expression .

    $default  reduce using rule 34 (expression)


State 87

   55 factor: var .

    $default  reduce using rule 55 (factor)


State 88

   38 simple-expression: additive-expression relop additive-expression .
   46 additive-expression: additive-expression . addop term

    ADD  shift, and go to state 65
    SUB  shift, and go to state 66

    $default  reduce using rule 38 (simple-expression)

    addop  go to state 74


State 89

   46 additive-expression: additive-expression addop term .
   50 term: term . mulop factor

    MUL  shift, and go to state 75
    DIV  shift, and go to state 76

    $default  reduce using rule 46 (additive-expression)

    mulop  go to state 77


State 90

   50 term: term mulop factor .

    $default  reduce using rule 50 (term)


State 91

   29 selection-stmt: IF LPARENTHESE expression RPARENTHESE . statement
   30               | IF LPARENTHESE expression RPARENTHESE . statement ELSE statement

    SEMICOLON    shift, and go to state 35
    LPARENTHESE  shift, and go to state 36
    LBRACE       shift, and go to state 26
    IF           shift, and go to state 38
    RETURN       shift, and go to state 39
    WHILE        shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    NUMBER       shift, and go to state 42

    compound-stmt        go to state 43
    statement            go to state 96
    expression-stmt      go to state 45
    selection-stmt       go to state 46
    iteration-stmt       go to state 47
    return-stmt          go to state 48
    expression           go to state 49
    var                  go to state 50
    simple-expression    go to state 51
    additive-expression  go to state 52
    term                 go to state 53
    factor               go to state 54
    call                 go to state 55


State 92

   31 iteration-stmt: WHILE LPARENTHESE expression RPARENTHESE . statement

    SEMICOLON    shift, and go to state 35
    LPARENTHESE  shift, and go to state 36
    LBRACE       shift, and go to state 26
    IF           shift, and go to state 38
    RETURN       shift, and go to state 39
    WHILE        shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    NUMBER       shift, and go to state 42

    compound-stmt        go to state 43
    statement            go to state 97
    expression-stmt      go to state 45
    selection-stmt       go to state 46
    iteration-stmt       go to state 47
    return-stmt          go to state 48
    expression           go to state 49
    var                  go to state 50
    simple-expression    go to state 51
    additive-expression  go to state 52
    term                 go to state 53
    factor               go to state 54
    call                 go to state 55


State 93

   58 call: IDENTIFIER LPARENTHESE args RPARENTHESE .

    $default  reduce using rule 58 (call)


State 94

   61 arg-list: arg-list COMMA . expression

    LPARENTHESE  shift, and go to state 36
    IDENTIFIER   shift, and go to state 41
    NUMBER       shift, and go to state 42

    expression           go to state 98
    var                  go to state 50
    simple-expression    go to state 51
    additive-expression  go to state 52
    term                 go to state 53
    factor               go to state 54
    call                 go to state 55


State 95

   37 var: IDENTIFIER LBRACKET expression RBRACKET .

    $default  reduce using rule 37 (var)


State 96

   29 selection-stmt: IF LPARENTHESE expression RPARENTHESE statement .
   30               | IF LPARENTHESE expression RPARENTHESE statement . ELSE statement

    ELSE  shift, and go to state 99

    ELSE      [reduce using rule 29 (selection-stmt)]
    $default  reduce using rule 29 (selection-stmt)


State 97

   31 iteration-stmt: WHILE LPARENTHESE expression RPARENTHESE statement .

    $default  reduce using rule 31 (iteration-stmt)


State 98

   61 arg-list: arg-list COMMA expression .

    $default  reduce using rule 61 (arg-list)


State 99

   30 selection-stmt: IF LPARENTHESE expression RPARENTHESE statement ELSE . statement

    SEMICOLON    shift, and go to state 35
    LPARENTHESE  shift, and go to state 36
    LBRACE       shift, and go to state 26
    IF           shift, and go to state 38
    RETURN       shift, and go to state 39
    WHILE        shift, and go to state 40
    IDENTIFIER   shift, and go to state 41
    NUMBER       shift, and go to state 42

    compound-stmt        go to state 43
    statement            go to state 100
    expression-stmt      go to state 45
    selection-stmt       go to state 46
    iteration-stmt       go to state 47
    return-stmt          go to state 48
    expression           go to state 49
    var                  go to state 50
    simple-expression    go to state 51
    additive-expression  go to state 52
    term                 go to state 53
    factor               go to state 54
    call                 go to state 55


State 100

   30 selection-stmt: IF LPARENTHESE expression RPARENTHESE statement ELSE statement .

    $default  reduce using rule 30 (selection-stmt)
